// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]
  accommodations Accommodation[]
  tourisms       Tourism[]
  shoppings      Shopping[]
  nightlifes     Nightlife[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Accommodation {
  id String @id @default(cuid())

  title     String
  address   String
  city      String
  state     String
  country   String
  slug      String            @unique
  type      AccommodationType // Enum to determine type (Hotel, Motel, Apartment) 
  author    User              @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([id, slug])
}

model Tourism {
  id          String   @id @default(cuid())
  title       String
  location    String
  description String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Shopping {
  id          String       @id @default(cuid())
  title       String
  location    String
  description String
  type        ShoppingType
  Admin       User?        @relation(fields: [adminId], references: [id])
  adminId     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum ShoppingType {
  MALL
  MARKET
}

model Nightlife {
  id          String        @id @default(cuid())
  title       String
  location    String
  description String
  type        NightlifeType
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Admin       User?         @relation(fields: [adminId], references: [id])
  adminId     String?
}

enum NightlifeType {
  CLUB
  LOUNGE
}

enum AccommodationType {
  HOTEL
  MOTEL
  APARTMENT
}

enum Role {
  USER
  ADMIN
}
